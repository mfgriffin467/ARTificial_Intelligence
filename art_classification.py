# -*- coding: utf-8 -*-
"""art_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Q8R5CP1e201cOGVI1EZK4u7Au1jXbuQ

# Art analysis

- Use large labelled dataset from Kaggle, focussing on 19th+ century artists with many pictures 
- Transfer learning via fastai libraries to identify style, genre and artist
- Achieves c75% accuracy on all tasks

### Librararies and drives
"""

!curl -s https://course.fast.ai/setup/colab | bash
from fastai.vision import *

pd.set_option('display.max_rows', 500)
pd.set_option('display.max_columns', 500)
pd.set_option('display.width', 1000)

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)
root_dir = "/content/gdrive/My Drive/"
base_dir = root_dir + 'Personal_projects/Art/'
path = Path(base_dir)

art_info = pd.read_csv(base_dir + "train_df.csv")
art_info['path'] = 'train/' + art_info['new_filename'].astype(str)
print(art_info.shape)

# Replace self-portrait with portrait label

art_info['genre_mod'] = ['people and portraits' if x in ['portrait', 'self-portrait', 'genre painting'] else x for x in art_info['genre']]
art_info['style_mod'] = ['Impressionistic' if x in ['Impressionism', 'Post-Impressionism'] else 'Romanticism' if x in ['Romanticism', 'Neo-Romanticism'] else x for x in art_info['style']]
#art_info['style_mod'] = ['Romanticism' if x in ['Romanticism', 'Neo-Romanticism'] else x for x in art_info['style']]
art_info.head()

sample_size = 1

# Could add mirror images to double size

# Filter for top 10 styles
#top_styles = art_info[['style','path']].groupby(['style']).count().sort_values(by ='path', ascending=False).head(10).reset_index()
#top10 = top_styles['style'].to_list()
#labels = art_info[art_info['style'].isin(top10)][['path','style']]

# Filter for top 10 styles
#top_styles = art_info[['style','path']].groupby(['style']).count().sort_values(by ='path', ascending=False).head(30).reset_index()
#top10 = top_styles['style'].to_list()
labels = art_info[['path','style_mod']]
labels = labels.sample(frac=sample_size)

labels.columns = ['path', 'label']
print(labels.shape)
labels.head()

#art_info.head()

art_info.groupby(['artist','style']).count()

"""## View data"""

# Prepare data with 20% validation set

np.random.seed(42)
data_style = ImageDataBunch.from_df(path, labels, 
                              valid_pct=0.2,
                              ds_tfms=get_transforms(), 
                              size=224, 
                              num_workers=4).normalize(imagenet_stats)
                              
#49849.jpg'

"""Good! Let's take a look at some of our pictures then."""

data_style.classes

data_style.show_batch(rows=3, figsize=(7,8))

data_style.classes, data_style.c, len(data_style.train_ds), len(data_style.valid_ds)

"""## Train model"""

learn = cnn_learner(data_style, models.resnet50, metrics=error_rate)

learn.fit_one_cycle(4)

learn.unfreeze()
learn.lr_find()

learn.recorder.plot()

learn.fit_one_cycle(10, max_lr=slice(3e-5,3e-4))

learn.recorder.plot_losses()

"""## Interpretation"""

#learn.load(base_dir + 'models/stage-2');

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix(figsize=(12,12))

#!git clone https://github.com/muellerzr/ClassConfusion
#from ClassConfusion import *
#classlist = ['kids_art', 'delaunay']
#ClassConfusion(interp, classlist)

"""## Adapt model to new labels

Adjust to use create_cnn_model
https://github.com/fastai/fastai/blob/master/fastai/vision/learner.py#L57
https://github.com/PPPW/deep-learning-random-explore/blob/master/CNN_archs/cnn_archs.ipynb
"""

genre_labels = art_info[['path','genre_mod']]
genre_labels.columns = ['path', 'label']
genre_labels = genre_labels.sample(frac=sample_size)

np.random.seed(1)
data_genre = ImageDataBunch.from_df(path, genre_labels, 
                              valid_pct=0.2,
                              ds_tfms=get_transforms(), 
                              size=224, 
                              num_workers=4).normalize(imagenet_stats)

learn_genre = cnn_learner(data_genre, models.resnet50, metrics=error_rate)
learn_genre.fit_one_cycle(4)

learn_genre.unfreeze()
learn_genre.fit_one_cycle(10, max_lr=slice(3e-5,3e-4))

interp_genre = ClassificationInterpretation.from_learner(learn_genre)
interp_genre.plot_confusion_matrix(figsize=(12,12))

"""## Artist recognition"""

artist_labels = art_info[['path','artist']]
artist_labels.columns = ['path', 'label']
artist_labels = artist_labels.sample(frac=sample_size)

np.random.seed(1)
data_artist = ImageDataBunch.from_df(path, artist_labels, 
                              valid_pct=0.2,
                              ds_tfms=get_transforms(), 
                              size=224, 
                              num_workers=4).normalize(imagenet_stats)

#data_artist.show_batch(rows=3, figsize=(7,8))

learn_artist = cnn_learner(data_artist, models.resnet50, metrics=error_rate)
learn_artist.fit_one_cycle(4)

learn_artist.unfreeze()
learn_artist.fit_one_cycle(10, max_lr=slice(3e-5,3e-4))

interp_artist = ClassificationInterpretation.from_learner(learn_artist)
interp_artist.plot_confusion_matrix(figsize=(12,12))

"""## Save models"""

learn.save(base_dir + 'models/style-2')
learn_genre.save(base_dir + 'models/genre-2')
learn_artist.save(base_dir + 'models/artist-2')

learn.load(base_dir + 'models/style-2')
learn_genre.load(base_dir + 'models/genre-2')
learn_artist.load(base_dir + 'models/artist-2')

"""## Cleaning up"""

#from fastai.widgets import *

#losses, idxs = interp.top_losses()
#top_loss_paths = data.valid_ds.x[idxs]

#ds, idxs = DatasetFormatter().from_toplosses(learn)

#ImageCleaner(ds, idxs, path)